import discord
from discord.ext import commands
import json
import os

from myserver import server_on  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ö‡∏ô Repl.it ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏ö

TOKEN = os.environ.get("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)


def load_json(file):
    with open(file, 'r', encoding='utf-8') as f:
        return json.load(f)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏±‡∏á‡∏á‡∏∞‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå BbMangaO.json
manga_data = load_json("CartooTonMang/BbMangaO.json")
ln_data = load_json("CartooTonMang/MmLineNovelO.json")


def get_page_image_url(base_url: str, chapter: int, page: int, nano=False):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á nano-manga ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    """
    if nano:
        # nano-manga URL pattern (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        return f"{base_url}/{chapter}/{page}.jpg"
    else:
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô manga-d.com)
        return f"{base_url}/{chapter}/{page}.jpg"


class ReaderView(discord.ui.View):
    def __init__(self, user, title, base_url, total_chapters, chapter, total_pages, nano=False):
        super().__init__(timeout=None)
        self.user = user
        self.title = title
        self.base_url = base_url
        self.chapter = chapter
        self.page = 1
        self.total_pages = total_pages
        self.total_chapters = total_chapters
        self.nano = nano

    async def update_embed(self, interaction):
        embed = discord.Embed(title=f"{self.title} - ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {self.chapter} ‡∏´‡∏ô‡πâ‡∏≤ {self.page}")
        embed.set_image(url=get_page_image_url(self.base_url, self.chapter, self.page, nano=self.nano))
        await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="‚¨ÖÔ∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", style=discord.ButtonStyle.primary)
    async def back(self, interaction, button):
        if interaction.user != self.user:
            return await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
        if self.page > 1:
            self.page -= 1
        await self.update_embed(interaction)

    @discord.ui.button(label="‚û°Ô∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", style=discord.ButtonStyle.primary)
    async def next(self, interaction, button):
        if interaction.user != self.user:
            return await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
        if self.page < self.total_pages:
            self.page += 1
        await self.update_embed(interaction)

    @discord.ui.button(label="‚è™ ‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", style=discord.ButtonStyle.success)
    async def prev_chapter(self, interaction, button):
        if interaction.user != self.user:
            return await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
        if self.chapter > 1:
            self.chapter -= 1
            self.page = 1
        await self.update_embed(interaction)

    @discord.ui.button(label="‚è© ‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", style=discord.ButtonStyle.success)
    async def next_chapter(self, interaction, button):
        if interaction.user != self.user:
            return await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
        if self.chapter < self.total_chapters:
            self.chapter += 1
            self.page = 1
        await self.update_embed(interaction)

    @discord.ui.button(label="üîÑ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î", style=discord.ButtonStyle.secondary)
    async def reload(self, interaction, button):
        if interaction.user != self.user:
            return await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", ephemeral=True)
        await self.update_embed(interaction)


class ChapterRangeSelect(discord.ui.Select):
    def __init__(self, user, title, base_url, total_chapters, nano=False):
        self.user = user
        self.title = title
        self.base_url = base_url
        self.total_chapters = total_chapters
        self.nano = nano

        options = []
        for i in range(1, total_chapters + 1, 20):
            end = min(i + 19, total_chapters)
            options.append(discord.SelectOption(label=f"‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {i}‚Äì{end}", value=f"{i}-{end}"))

        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏≠‡∏ô...", options=options)

    async def callback(self, interaction: discord.Interaction):
        start, end = map(int, self.values[0].split('-'))
        view = discord.ui.View(timeout=None)
        view.add_item(SingleChapterSelect(
            user=self.user,
            title=self.title,
            base_url=self.base_url,
            total_chapters=self.total_chapters,
            start=start,
            end=end,
            nano=self.nano
        ))
        await interaction.response.send_message("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ô:", view=view, ephemeral=True)


class SingleChapterSelect(discord.ui.Select):
    def __init__(self, user, title, base_url, total_chapters, start, end, nano=False):
        self.user = user
        self.title = title
        self.base_url = base_url
        self.total_chapters = total_chapters
        self.nano = nano

        options = [
            discord.SelectOption(label=f"‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {i}", value=str(i))
            for i in range(start, end + 1)
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ...", options=options)

    async def callback(self, interaction: discord.Interaction):
        chapter = int(self.values[0])
        await interaction.response.send_message(
            f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î {self.title} ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {chapter}...",
            view=ReaderView(
                user=self.user,
                title=self.title,
                base_url=self.base_url,
                total_chapters=self.total_chapters,
                chapter=chapter,
                total_pages=20,
                nano=self.nano
            ),
            ephemeral=True
        )


class TitleDropdown(discord.ui.Select):
    def __init__(self, user, data, label):
        self.user = user
        self.data = data
        options = [
            discord.SelectOption(label=title, description=f"{info['chapters']} ‡∏ï‡∏≠‡∏ô")
            for title, info in list(data.items())[:25]
        ]
        super().__init__(placeholder=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {label}...", options=options)

    async def callback(self, interaction: discord.Interaction):
        title = self.values[0]
        info = self.data[title]
        view = discord.ui.View(timeout=None)
        view.add_item(ChapterRangeSelect(
            user=self.user,
            title=title,
            base_url=info['link'],
            total_chapters=info['chapters'],
            nano=info.get('nano', False)  # ‡∏™‡πà‡∏á flag nano ‡∏°‡∏≤
        ))
        await interaction.response.send_message(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á **{title}**:", view=view, ephemeral=True)


class TypeDropdown(discord.ui.Select):
    def __init__(self, user):
        self.user = user
        options = [
            discord.SelectOption(label="‡∏°‡∏±‡∏á‡∏á‡∏∞ | Manga"),
            discord.SelectOption(label="‡πÑ‡∏•‡∏ô‡πå‡πÇ‡∏ô‡πÄ‡∏ß‡∏• | Light Novel")
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó...", options=options)

    async def callback(self, interaction: discord.Interaction):
        view = discord.ui.View(timeout=None)
        if self.values[0].startswith("‡∏°‡∏±‡∏á‡∏á‡∏∞"):
            view.add_item(TitleDropdown(self.user, manga_data, "‡∏°‡∏±‡∏á‡∏á‡∏∞"))
        else:
            view.add_item(TitleDropdown(self.user, ln_data, "‡πÑ‡∏•‡∏ó‡πå‡πÇ‡∏ô‡πÄ‡∏ß‡∏•"))
        await interaction.response.send_message("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:", view=view, ephemeral=True)


class DropdownStart(discord.ui.View):
    def __init__(self, user):
        super().__init__(timeout=None)
        self.add_item(TypeDropdown(user))


@bot.command()
async def test(ctx):
    try:
        await ctx.send("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:", view=DropdownStart(user=ctx.author))
    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        print(f"[ERROR IN TEST COMMAND]: {e}")


server_on()


bot.run(TOKEN)
