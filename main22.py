import os
import discord
import asyncio
import aiohttp
import pytz
from discord.ext import commands, tasks
from datetime import datetime


from myserver import server_on

# ‡πÇ‡∏´‡∏•‡∏î TOKEN ‡∏à‡∏≤‡∏Å Environment Variable
TOKEN = os.environ.get("DISCORD_TOKEN")


WEATHER_CHANNEL_ID = 1371471375361114182  # ‡πÅ‡∏ä‡∏ô‡πÅ‡∏ô‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
STATUS_CHANNEL_ID = 1371468773403660338  # ‡πÅ‡∏ä‡∏ô‡πÅ‡∏ô‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
GUILD_ID = 905530303467094027
API_KEY = '56c594de7daca68b44c11aa5feb133d1'

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.presences = True

bot = commands.Bot(command_prefix="!", intents=intents)

LOCATIONS = [
    {"name": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "lat": 13.7563, "lon": 100.5018},
    {"name": "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", "lat": 15.4712, "lon": 99.6799},
    {"name": "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", "lat": 15.0743, "lon": 100.1301},
    {"name": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", "lat": 19.9126, "lon": 99.8310},
    {"name": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "lat": 18.7883, "lon": 98.9853}
]

thai_days = {
    'Monday': '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
    'Tuesday': '‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
    'Wednesday': '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò',
    'Thursday': '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
    'Friday': '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå',
    'Saturday': '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå',
    'Sunday': '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå'
}

thai_months = {
    'January': '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
    'February': '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
    'March': '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
    'April': '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
    'May': '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
    'June': '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    'July': '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
    'August': '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
    'September': '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
    'October': '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
    'November': '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
    'December': '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
}

WEATHER_MESSAGE_ID = 1371491919401717770
STATUS_MESSAGE_ID = 1371491918076448798

async def get_weather(location):
    async with aiohttp.ClientSession() as session:
        url = f"http://api.openweathermap.org/data/2.5/weather?lat={location['lat']}&lon={location['lon']}&appid={API_KEY}&units=metric&lang=th"
        async with session.get(url) as response:
            data = await response.json()
            if response.status == 200:
                temp = data['main']['temp']
                desc = data['weather'][0]['description']
                return f"{location['name']}: {temp}¬∞C, {desc}"
            else:
                return f"{location['name']}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏£‡∏´‡∏±‡∏™ {response.status})"

@tasks.loop(minutes=1)
async def update_weather():
    global WEATHER_MESSAGE_ID
    weather_channel = bot.get_channel(WEATHER_CHANNEL_ID)

    lines = []
    for location in LOCATIONS:
        result = await get_weather(location)
        lines.append(result)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    now = datetime.now(pytz.timezone("Asia/Bangkok"))
    day_th = thai_days[now.strftime('%A')]
    month_th = thai_months[now.strftime('%B')]
    year_th = now.year + 543
    update_time = f"{day_th} ‡∏ó‡∏µ‡πà {now.day} {month_th} ‡∏û.‡∏®. {year_th} ‡πÄ‡∏ß‡∏•‡∏≤ {now.strftime('%H:%M:%S')}"

    embed = discord.Embed(title="**‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® üå¶Ô∏è**", color=0x3399ff)
    embed.description = "\n".join(lines) + f"\n\n„Äî‚è∞„Äï‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ {update_time}"
    embed.set_footer(text="„ÄîüîÑ„Äï‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ")

    try:
        if WEATHER_MESSAGE_ID:
            msg = await weather_channel.fetch_message(WEATHER_MESSAGE_ID)
            await msg.edit(embed=embed)
        else:
            msg = await weather_channel.send(embed=embed)
            WEATHER_MESSAGE_ID = msg.id
    except discord.NotFound:
        msg = await weather_channel.send(embed=embed)
        WEATHER_MESSAGE_ID = msg.id


@tasks.loop(seconds=10)
async def update_group_status():
    global STATUS_MESSAGE_ID
    guild = bot.get_guild(GUILD_ID)
    status_channel = bot.get_channel(STATUS_CHANNEL_ID)

    if not guild or not status_channel:
        return

    online = sum(1 for m in guild.members if m.status != discord.Status.offline)
    offline = guild.member_count - online

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    created_at = guild.created_at.astimezone(pytz.timezone("Asia/Bangkok"))
    day_th = thai_days[created_at.strftime('%A')]
    month_th = thai_months[created_at.strftime('%B')]
    year_th = created_at.year + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
    created_date_str = f"{day_th} {created_at.day} {month_th} {year_th} ‡πÄ‡∏ß‡∏•‡∏≤ {created_at.strftime('%H:%M:%S')}"

    embed = discord.Embed(title="**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏û‡∏°‡πà‡∏≤ | ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏áüçó**", color=0x00cc99)
    embed.add_field(name="„Äîüî®„Äï‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠", value=created_date_str, inline=False)
    embed.add_field(name="„Äîüë•„Äï‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"{guild.member_count} ‡∏Ñ‡∏ô", inline=True)
    embed.add_field(name="„Äîüü¢„Äï‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", value=f"{online} ‡∏Ñ‡∏ô", inline=True)
    embed.add_field(name="„Äî‚ö´„Äï‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå", value=f"{offline} ‡∏Ñ‡∏ô", inline=True)
    embed.set_footer(text="„ÄîüîÑ„Äï‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

    try:
        if STATUS_MESSAGE_ID:
            msg = await status_channel.fetch_message(STATUS_MESSAGE_ID)
            await msg.edit(embed=embed)
        else:
            msg = await status_channel.send(embed=embed)
            STATUS_MESSAGE_ID = msg.id
    except discord.NotFound:
        msg = await status_channel.send(embed=embed)
        STATUS_MESSAGE_ID = msg.id

@bot.event
async def on_ready():
    print(f"‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô {bot.user}")
    update_weather.start()
    update_group_status.start()

server_on()

bot.run(TOKEN)
